#! /usr/bin/env python3
from mpi4py import MPI
from torchswe import nplike
from torchswe.utils.config import SingleBCConfig, BCConfig
from torchswe.utils.init import get_process
from torchswe.utils.init import get_gridline
from torchswe.utils.init import get_domain
from torchswe.utils.init import get_empty_states
from torchswe.core.boundary_conditions import get_ghost_cell_updaters

rank = MPI.COMM_WORLD.Get_rank()

nx, ny = 2000, 1000

process = get_process(MPI.COMM_WORLD, 2000, 1000)
x = get_gridline("x", process.pnx, process.pi, 2000, 0., 2., "float64")
y = get_gridline("y", process.pny, process.pj, 1000, 0., 1., "float64")
domain = get_domain(process, x, y)
states = get_empty_states(domain, 2)
states.check()

nx = 1004
ny = 1004
bg = (1, nx * ny + 1)
ed = (nx * ny + 1, nx * ny * 2 + 1)

states.q.w[...] = nplike.arange(bg[rank], ed[rank], dtype="float64").reshape(ny, nx)
states.q.hu[...] = nplike.arange(bg[rank], ed[rank], dtype="float64").reshape(ny, nx) * 2
states.q.hv[...] = nplike.arange(bg[rank], ed[rank], dtype="float64").reshape(ny, nx) * 3

bcs = BCConfig(
    west=SingleBCConfig(types=("outflow", "outflow", "outflow")),
    east=SingleBCConfig(types=("outflow", "outflow", "outflow")),
    south=SingleBCConfig(types=("outflow", "outflow", "outflow")),
    north=SingleBCConfig(types=("outflow", "outflow", "outflow"))
)

updater = get_ghost_cell_updaters(bcs, states)

states = updater(states)

msg = f"{rank}"
if rank == 0:

    # west
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][2:-2, 0], states.q[k][2:-2, 2]), msg
        assert nplike.allclose(states.q[k][2:-2, 1], states.q[k][2:-2, 2]), msg

    # east
    for i, k in enumerate(["w", "hu", "hv"]):
        assert nplike.allclose(
            states.q[k][2:-2, -2], nplike.arange(bg[1]+nx*2+2, ed[1]-nx*2+2, nx) * (i + 1)), msg
        assert nplike.allclose(
            states.q[k][2:-2, -1], nplike.arange(bg[1]+nx*2+3, ed[1]-nx*2+3, nx) * (i + 1)), msg

    # south
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][0, 2:-2], states.q[k][2, 2:-2]), msg
        assert nplike.allclose(states.q[k][1, 2:-2], states.q[k][2, 2:-2]), msg

    # north
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][-2, 2:-2], states.q[k][-3, 2:-2]), msg
        assert nplike.allclose(states.q[k][-1, 2:-2], states.q[k][-3, 2:-2]), msg

elif rank == 1:

    # west
    for i, k in enumerate(["w", "hu", "hv"]):
        assert nplike.allclose(
            states.q[k][2:-2, 0], nplike.arange(bg[0]+nx*3-4, ed[0]-nx*1-4, nx) * (i + 1)), msg
        assert nplike.allclose(
            states.q[k][2:-2, 1], nplike.arange(bg[0]+nx*3-3, ed[0]-nx*1-3, nx) * (i + 1)), msg

    # east
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][2:-2, -2], states.q[k][2:-2, -3]), msg
        assert nplike.allclose(states.q[k][2:-2, -1], states.q[k][2:-2, -3]), msg

    # south
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][0, 2:-2], states.q[k][2, 2:-2]), msg
        assert nplike.allclose(states.q[k][1, 2:-2], states.q[k][2, 2:-2]), msg

    # north
    for k in ["w", "hu", "hv"]:
        assert nplike.allclose(states.q[k][-2, 2:-2], states.q[k][-3, 2:-2]), msg
        assert nplike.allclose(states.q[k][-1, 2:-2], states.q[k][-3, 2:-2]), msg

else:
    raise RuntimeError("This test needs exactly 2 MPI processes.")
