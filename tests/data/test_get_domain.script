#! /usr/bin/env python3
from mpi4py import MPI
from torchswe import nplike
from torchswe.utils.init import get_process
from torchswe.utils.init import get_gridline
from torchswe.utils.init import get_domain

rank=MPI.COMM_WORLD.Get_rank()

process = get_process(MPI.COMM_WORLD, 50, 50)
x = get_gridline("x", process.pnx, process.pi, 50, 0., 5., "float64")
y = get_gridline("y", process.pny, process.pj, 50, 0., 10., "float64")
domain = get_domain(process, x, y)

if rank == 0:
    assert abs(domain.x.lower) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.x.upper-2.5) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.lower) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.upper-5.) < 1e-12, "from rank {}".format(rank)

elif rank == 1:
    assert abs(domain.x.lower-2.5) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.x.upper-5.) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.lower) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.upper-5.) < 1e-12, "from rank {}".format(rank)

elif rank == 2:
    assert abs(domain.x.lower) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.x.upper-2.5) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.lower-5.) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.upper-10.) < 1e-12, "from rank {}".format(rank)

elif rank == 3:
    assert abs(domain.x.lower-2.5) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.x.upper-5.) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.lower-5.) < 1e-12, "from rank {}".format(rank)
    assert abs(domain.y.upper-10.) < 1e-12, "from rank {}".format(rank)
